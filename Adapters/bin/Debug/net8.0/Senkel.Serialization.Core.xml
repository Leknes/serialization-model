<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senkel.Serialization.Core</name>
    </assembly>
    <members>
        <member name="T:Senkel.Serialization.IAsyncDeserializer`1">
            <summary>
            Represents an asynchronous deserializer that is capable of deserializing objects from a source of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects that can be deserialized.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IAsyncDeserializer`1.DeserializeAsync(`0,System.Type,System.Threading.CancellationToken)">
            <summary>
            Deserializes an object of the specified type from the given source asynchronously.
            </summary>
            <param name="source">The source to deserialize from.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="cancellationToken">The cancellation token of the task.</param>
            <returns>A task containing the deserialized object.</returns>
        </member>
        <member name="M:Senkel.Serialization.IAsyncDeserializer`1.DeserializeAsync``1(`0,System.Threading.CancellationToken)">
            <summary>
            Deserializes an object of the specified type from the given source asynchronously.
            </summary>
            <param name="source">The source to deserialize from.</param>
            <param name="cancellationToken">The cancellation token of the task.</param>
            <typeparam name="U">The type of the object to deserialize.</typeparam>
            <returns>A task containing the deserialized object.</returns>
        </member>
        <member name="T:Senkel.Serialization.IAsyncMarshal`1">
            <summary>
            Represents an asynchronous serializer that is capable of serializing an object and marshalling the serialized data to a destination of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of destination that serialized data can be marshalled to.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IAsyncMarshal`1.MarshalAsync(`0,System.Object,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified object and marshals the serialized data to the given destination asynchronously.
            </summary>
            <param name="destination">The destination to marshal to.</param>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">The cancellation token of the task.</param>
            <returns>The task of the marshalling.</returns>
        </member>
        <member name="T:Senkel.Serialization.IAsyncPopulator`1">
            <summary>
            Represents an asynchronous deserializer that is capable of populating objects using a source of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The typeof objects that can be used for populating.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IAsyncPopulator`1.PopulateAsync(`0,System.Object,System.Threading.CancellationToken)">
            <summary>
            Populates the specified target object using the given source.
            </summary>
            <param name="source">The source to populate the target from.</param>
            <param name="target">The object to populate.</param>
            <param name="cancellationToken">The cancellation token of the task.</param>
            <returns>The task of the population.</returns>
        </member>
        <member name="T:Senkel.Serialization.IAsyncSerializer`1">
            <summary>
            Represents an asynchronous serializer that is capable of serializing to objects of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type that objects can be serialized to.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IAsyncSerializer`1.SerializeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Serializes the specified object to an instance of the type <typeparamref name="T"/> asynchronously.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="cancellationToken">The cancellation token of the task.</param>
            <returns>A task containing the serialized object.</returns>
        </member>
        <member name="T:Senkel.Serialization.SerializationException">
            <summary>
            The exception that is thrown whenever serialization or deserialization has failed.
            </summary>
        </member>
        <member name="M:Senkel.Serialization.SerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Senkel.Serialization.SerializationException"/> class with the specified message. 
            </summary>
            <param name="message">The message string of the exception.</param>
        </member>
        <member name="M:Senkel.Serialization.SerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Senkel.Serialization.SerializationException"/>.
            </summary> 
        </member>
        <member name="M:Senkel.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Senkel.Serialization.SerializationException"/> with the specified message and inner exception.
            </summary> 
            <param name="message">The message string of the exception.</param>
            <param name="innerException">The inner exception of the exception.</param>
        </member>
        <member name="T:Senkel.Serialization.IDeserializer`1">
            <summary>
            Represents a deserializer that is capable of deserializing objects from a source of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects that can be deserialized.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IDeserializer`1.Deserialize(`0,System.Type)">
            <summary>
            Deserializes an object of the specified type from the given source.
            </summary>
            <param name="source">The source to deserialize from.</param>
            <param name="type">The type of the object to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Senkel.Serialization.IDeserializer`1.Deserialize``1(`0)">
            <summary>
            Deserializes an object of the specified type from the given source.
            </summary>
            <param name="source">The source to deserialize from.</param>
            <typeparam name="U">The type of the object to deserialize.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Senkel.Serialization.IMarshal`1">
            <summary>
            Represents a serializer that is capable of serializing an object and marshalling the serialized data to a destination of the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of destination that serialized data can be marshalled to.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IMarshal`1.Marshal(`0,System.Object)">
            <summary>
            Serializes the specified object and marshals the serialized data to the given destination.
            </summary>
            <param name="destination">The destination to marshal to.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="T:Senkel.Serialization.IPopulator`1">
            <summary>
            Represents a deserializer that is capable of populating objects using a source of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The typeof objects that can be used for populating.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.IPopulator`1.Populate(`0,System.Object)">
            <summary>
            Populates the specified target object using the given source.
            </summary>
            <param name="source">The source to populate the target from.</param>
            <param name="target">The object to populate.</param>
        </member>
        <member name="T:Senkel.Serialization.ISerializer`1">
            <summary>
            Represents a serializer that is capable of serializing to objects of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type that objects can be serialized to.</typeparam>
        </member>
        <member name="M:Senkel.Serialization.ISerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the specified object to an instance of the type <typeparamref name="T"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>The serialized object.</returns>
        </member>
    </members>
</doc>
